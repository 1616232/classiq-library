{
  "functions": [
    {
      "name": "modular_exponentiation",
      "param_decls": {
        "power": {
          "kind": "int"
        }
      },
      "port_declarations": {
        "target": {
          "name": "target",
          "direction": "inout",
          "size": {
            "expr": "4"
          }
        }
      },
      "operand_declarations": {},
      "positional_arg_declarations": [],
      "body": [
        {
          "function": "unitary",
          "params": {
            "elements": {
              "expr": "Matrix([[0.5*(-1.0)**(2**power) + 0.5*1.0**(2**power), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5*(-1.0)**(2**power) + 0.5*1.0**(2**power)], [0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0], [0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0], [0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0], [0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0], [0, 0, 0, 0, 0, 1.0*1.0**(2**power), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0], [0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0], [0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0], [0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0*1.0**(2**power), 0, 0, 0, 0, 0], [0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0], [0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0], [0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0], [0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0], [-0.5*(-1.0)**(2**power) + 0.5*1.0**(2**power), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5*(-1.0)**(2**power) + 0.5*1.0**(2**power)]])"
            }
          },
          "function_params": {},
          "inputs": {},
          "inouts": {
            "target": {
              "name": "target"
            }
          },
          "outputs": {},
          "operands": {}
        }
      ],
      "local_handles": []
    },
    {
      "name": "period_finding",
      "param_decls": {},
      "port_declarations": {
        "qv_counting": {
          "name": "qv_counting",
          "direction": "output",
          "size": {
            "expr": "8"
          }
        },
        "qv_auxilliary": {
          "name": "qv_auxilliary",
          "direction": "output",
          "size": {
            "expr": "4"
          }
        }
      },
      "operand_declarations": {},
      "positional_arg_declarations": [],
      "body": [
        {
          "function": "allocate",
          "params": {
            "num_qubits": {
              "expr": "8"
            }
          },
          "function_params": {},
          "inputs": {},
          "inouts": {},
          "outputs": {
            "out": {
              "name": "qv_counting"
            }
          },
          "operands": {}
        },
        {
          "function": "uniform_superposition",
          "params": {
            "num_qubits": {
              "expr": "8"
            }
          },
          "function_params": {},
          "inputs": {},
          "inouts": {
            "q": {
              "name": "qv_counting"
            }
          },
          "outputs": {},
          "operands": {}
        },
        {
          "function": "allocate",
          "params": {
            "num_qubits": {
              "expr": "4"
            }
          },
          "function_params": {},
          "inputs": {},
          "inouts": {},
          "outputs": {
            "out": {
              "name": "qv_auxilliary"
            }
          },
          "operands": {}
        },
        {
          "function": "X",
          "params": {},
          "function_params": {},
          "inputs": {},
          "inouts": {
            "target": {
              "name": "qv_auxilliary",
              "start": {
                "expr": "0"
              },
              "end": {
                "expr": "1"
              }
            }
          },
          "outputs": {},
          "operands": {}
        },
        {
          "function": "join",
          "params": {},
          "function_params": {},
          "inputs": {
            "in1": {
              "name": "qv_counting"
            },
            "in2": {
              "name": "qv_auxilliary"
            }
          },
          "inouts": {},
          "outputs": {
            "out": {
              "name": "qv_all"
            }
          },
          "operands": {}
        },
        {
          "function": "repeat",
          "params": {
            "count": {
              "expr": "4"
            }
          },
          "function_params": {},
          "inputs": {},
          "inouts": {
            "qbv": {
              "name": "qv_all"
            }
          },
          "outputs": {},
          "operands": {
            "iteration": {
              "rename_params": {},
              "body": [
                {
                  "function": "control",
                  "params": {},
                  "function_params": {},
                  "inputs": {},
                  "inouts": {
                    "ctrl": {
                      "name": "qbv",
                      "start": {
                        "expr": "index"
                      },
                      "end": {
                        "expr": "index + 1"
                      }
                    },
                    "target": {
                      "name": "qbv",
                      "start": {
                        "expr": "8"
                      },
                      "end": {
                        "expr": "12"
                      }
                    }
                  },
                  "outputs": {},
                  "operands": {
                    "operand": {
                      "rename_params": {},
                      "body": [
                        {
                          "function": "modular_exponentiation",
                          "params": {
                            "power": {
                              "expr": "index"
                            }
                          },
                          "function_params": {},
                          "inputs": {},
                          "inouts": {
                            "target": {
                              "name": "target"
                            }
                          },
                          "outputs": {},
                          "operands": {}
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "function": "split",
          "params": {
            "out1_size": {
              "expr": "8"
            },
            "out2_size": {
              "expr": "4"
            }
          },
          "function_params": {},
          "inputs": {
            "in": {
              "name": "qv_all"
            }
          },
          "inouts": {},
          "outputs": {
            "out1": {
              "name": "qv_counting"
            },
            "out2": {
              "name": "qv_auxilliary"
            }
          },
          "operands": {}
        },
        {
          "function": "invert",
          "params": {},
          "function_params": {},
          "inputs": {},
          "inouts": {
            "target": {
              "name": "qv_counting"
            }
          },
          "outputs": {},
          "operands": {
            "operand": {
              "rename_params": {},
              "body": [
                {
                  "function": "qft",
                  "params": {
                    "num_qbits": {
                      "expr": "8"
                    }
                  },
                  "function_params": {},
                  "inputs": {},
                  "inouts": {
                    "qbv": {
                      "name": "target"
                    }
                  },
                  "outputs": {},
                  "operands": {}
                }
              ]
            }
          }
        }
      ],
      "local_handles": [
        {
          "name": "qv_all"
        }
      ]
    },
    {
      "name": "main",
      "param_decls": {},
      "port_declarations": {
        "qv_counting": {
          "name": "qv_counting",
          "direction": "output",
          "size": {
            "expr": "8"
          }
        }
      },
      "operand_declarations": {},
      "positional_arg_declarations": [],
      "body": [
        {
          "function": "period_finding",
          "params": {},
          "function_params": {},
          "inputs": {},
          "inouts": {},
          "outputs": {
            "qv_counting": {
              "name": "qv_counting"
            },
            "qv_auxilliary": {
              "name": "qv_auxilliary"
            }
          },
          "operands": {}
        }
      ],
      "local_handles": [
        {
          "name": "qv_auxilliary"
        }
      ]
    }
  ],
  "types": []
}
