{
  "functions": [
    {
      "name": "modular_exponentiation",
      "param_decls": {
        "power": {
          "kind": "int"
        }
      },
      "port_declarations": {
        "target": {
          "name": "target",
          "quantum_type": {
            "kind": "qvec"
          },
          "direction": "inout"
        }
      },
      "operand_declarations": {},
      "positional_arg_declarations": [
        {
          "name": "power",
          "classical_type": {
            "kind": "int"
          }
        },
        {
          "name": "target",
          "quantum_type": {
            "kind": "qvec"
          },
          "direction": "inout"
        }
      ],
      "body": [
        {
          "function": "unitary",
          "function_params": {},
          "positional_args": [
            {
              "expr": "Matrix([[0.5*(-1.0)**(2**power) + 0.5*1.0**(2**power), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5*(-1.0)**(2**power) + 0.5*1.0**(2**power)], [0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0], [0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0], [0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0], [0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0], [0, 0, 0, 0, 0, 1.0*1.0**(2**power), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0], [0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0], [0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0], [0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0*1.0**(2**power), 0, 0, 0, 0, 0], [0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0], [0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0, 0], [0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0, 0], [0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*I*(1.0*I)**(2**power) + 0.25*I*(-1.0*I)**(2**power), 0, 0, 0, 0, 0, -0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*I*(1.0*I)**(2**power) - 0.25*I*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) - 0.25*(1.0*I)**(2**power) - 0.25*(-1.0*I)**(2**power), 0, 0, 0.25*(-1.0)**(2**power) + 0.25*1.0**(2**power) + 0.25*(1.0*I)**(2**power) + 0.25*(-1.0*I)**(2**power), 0], [-0.5*(-1.0)**(2**power) + 0.5*1.0**(2**power), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5*(-1.0)**(2**power) + 0.5*1.0**(2**power)]])"
            },
            {
              "name": "target"
            }
          ]
        }
      ],
      "local_handles": []
    },
    {
      "name": "period_finding",
      "param_decls": {},
      "port_declarations": {
        "qv_counting": {
          "name": "qv_counting",
          "quantum_type": {
            "kind": "qvec"
          },
          "direction": "output"
        },
        "qv_auxilliary": {
          "name": "qv_auxilliary",
          "quantum_type": {
            "kind": "qvec"
          },
          "direction": "output"
        }
      },
      "operand_declarations": {},
      "positional_arg_declarations": [
        {
          "name": "qv_counting",
          "quantum_type": {
            "kind": "qvec"
          },
          "direction": "output"
        },
        {
          "name": "qv_auxilliary",
          "quantum_type": {
            "kind": "qvec"
          },
          "direction": "output"
        }
      ],
      "body": [
        {
          "function": "allocate",
          "function_params": {},
          "positional_args": [
            {
              "expr": "8"
            },
            {
              "name": "qv_counting"
            }
          ]
        },
        {
          "function": "hadamard_transform",
          "function_params": {},
          "positional_args": [
            {
              "expr": "8"
            },
            {
              "name": "qv_counting"
            }
          ]
        },
        {
          "function": "allocate",
          "function_params": {},
          "positional_args": [
            {
              "expr": "4"
            },
            {
              "name": "qv_auxilliary"
            }
          ]
        },
        {
          "function": "X",
          "function_params": {},
          "positional_args": [
            {
              "name": "qv_auxilliary",
              "start": {
                "expr": "0"
              },
              "end": {
                "expr": "1"
              }
            }
          ]
        },
        {
          "function": "repeat",
          "function_params": {},
          "positional_args": [
            {
              "expr": "4"
            },
            {
              "rename_params": {},
              "body": [
                {
                  "function": "control",
                  "function_params": {},
                  "positional_args": [
                    {
                      "rename_params": {},
                      "body": [
                        {
                          "function": "modular_exponentiation",
                          "function_params": {},
                          "positional_args": [
                            {
                              "expr": "index"
                            },
                            {
                              "name": "qv_auxilliary"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "qv_counting",
                      "start": {
                        "expr": "index"
                      },
                      "end": {
                        "expr": "index + 1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "function": "invert",
          "function_params": {},
          "positional_args": [
            {
              "rename_params": {},
              "body": [
                {
                  "function": "qft",
                  "function_params": {},
                  "positional_args": [
                    {
                      "expr": "8"
                    },
                    {
                      "name": "qv_counting"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "local_handles": []
    },
    {
      "name": "main",
      "param_decls": {},
      "port_declarations": {
        "qv_counting": {
          "name": "qv_counting",
          "quantum_type": {
            "kind": "qvec"
          },
          "direction": "output"
        }
      },
      "operand_declarations": {},
      "positional_arg_declarations": [
        {
          "name": "qv_counting",
          "quantum_type": {
            "kind": "qvec"
          },
          "direction": "output"
        }
      ],
      "body": [
        {
          "function": "period_finding",
          "function_params": {},
          "positional_args": [
            {
              "name": "qv_counting"
            },
            {
              "name": "qv_auxilliary"
            }
          ]
        }
      ],
      "local_handles": [
        {
          "name": "qv_auxilliary",
          "quantum_type": {
            "kind": "qvec"
          }
        }
      ]
    }
  ],
  "types": []
}
