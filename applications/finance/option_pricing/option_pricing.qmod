qfunc qmci<num_phase_qubits: int, num_unitary_qubits: int, sp_op: qfunc <num_unitary_qubits: int>(reg: qbit[num_unitary_qubits - 1], ind: qbit)>(output phase_port: qbit[num_phase_qubits], output unitary_port: qbit[num_unitary_qubits]) {
  amplitude_estimation<num_phase_qubits, num_unitary_qubits, lambda<num_unitary_qubits>(spq) {
    sp_op<num_unitary_qubits>(spq[0:num_unitary_qubits-1], spq[num_unitary_qubits-1:num_unitary_qubits]);
  }, lambda<num_unitary_qubits>(oq) {
    Z(oq[num_unitary_qubits-1:num_unitary_qubits]);
  }>(phase_port, unitary_port);
}

qfunc main(output phase_port: qbit[2]) {
  unitary_port: qbit[];
  qmci<2, 6, lambda<num_unitary_qubits>(reg, ind) {
    log_normal_finance<LogNormalModel {
      num_qubits = 5,
      mu = 0.7,
      sigma = 0.13
    }, FinanceFunction {
      f = FinanceFunctionType::EUROPEAN_CALL_OPTION,
      threshold = 1.9,
      larger = True,
      polynomial_degree = 0,
      use_chebyshev_polynomial_approximation = False,
      tail_probability = 0.0
    }>(reg, ind);
  }>(phase_port, unitary_port);
}

cscope ```

def execute_amplitude_estimation(phase_port_size):
    result = sample()
    estimation = qae_with_qpe_result_post_processing(
        estimation_register_size=phase_port_size,
        estimation_method=1,
        result=result
    )
    save({"result": result, "estimation": estimation})
    return estimation

estimation = execute_amplitude_estimation(2)
result = log_normal_finance_post_process(struct_literal(LogNormalModel, num_qubits=5, mu=0.7, sigma=0.13), struct_literal(FinanceFunction, f=FinanceFunctionType.EUROPEAN_CALL_OPTION, threshold=1.9, larger=True, polynomial_degree=0, use_chebyshev_polynomial_approximation=False, tail_probability=0.0), estimation)
save({'result': result})

```
